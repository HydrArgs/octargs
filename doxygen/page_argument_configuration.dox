/**

\page page_argument_configuration Argument configuration

\brief Examples showing how arguments could be configured

\tableofcontents


\section section_help_multiname Multiple names

Command line application often allows to user multiple names for the
same argument to let the user choose: use short names and type less ("-o")
or provide meaningful name, especially useful in scripts ("--output").

For switch, valued and exclusive arguments (so these which names are specified
when providing command line input) it is possible to provide multiple names.

\snippet code_multiname.cpp Snippet

Full code:

\include code_multiname.cpp



\section section_help_required Required value

Switch, valued and positional arguments allow to configure how
many times the argument could be given in the input. There are two values
that could be set: minimum and maximum count.

To set value as required (must be provided by the user) set the minimum count to
a value greater than zero (default count is 0 making the argument optional).

\snippet code_required.cpp Snippet

Full code:

\include code_required.cpp


\section section_help_multivalue Multiple values

The argument could also accept being given more than once in the input.
That could be done by specifying the maximum count - either to a integer
value or an "unlimited" count.

\snippet code_multivalue.cpp Snippet

Full code:

\include code_multivalue.cpp


\section section_help_defaults Default values

Sometimes, to simplify application logic, it is good to provide default
values for the argument if nothing is provided by the user. For example
for a "tail" command there will be a built-in initial limit of 10 lines
of output to be printed.

\snippet code_defaults.cpp Snippet

Full code:

\include code_defaults.cpp


\section section_help_allowed Allowed values

For some arguments it may be useful to limit the set of values that are valid
in the input. For example for sort application we would like to have order which
is either "asc" (ascending) or "desc" (descending).

\snippet code_allowed.cpp Snippet

Full code:

\include code_allowed.cpp


\section section_help_type_std Value type - Standard types

As the parsed results would be used by C++ code there is a possibility to set
the type of argument values. That attaches to the argument a type handler that
by default performs value conversion to the defined type. There is a set of
predefined converters but a custom one could also be used.

\snippet code_value_type_std.cpp Snippet

Full code:

\include code_value_type_std.cpp


\section section_help_type_custom Value type - Custom

Using custom types require to provide the data type and a converter functor type.
Given converter will be used to change the string representation to requested data type.

First the type should be defined:

\snippet code_value_type_custom.cpp Snippet Type

And then the type should be configured

\snippet code_value_type_custom.cpp Snippet Configuration

Full code:

\include code_value_type_custom.cpp


\section section_help_type_cast Results - Get values with conversion

The argument type could be set but the results set still returns them as strings.
To make usage of library easier a methods were defined to get the values with conversion
to requested type.

For standard primitive types the converters are provided by library, for custom types they
could be given by the user. Please note that the built-in converters throw exceptions if
the conversion could not be done, probably the same pattern should be followed by custom converters.

\snippet code_type_cast.cpp Snippet

Full code:

\include code_type_cast.cpp

*/
